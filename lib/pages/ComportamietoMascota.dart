import 'package:PetCare/class/SessionProvider.dart';
import 'package:firebase_ml_model_downloader/firebase_ml_model_downloader.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tflite_flutter/tflite_flutter.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class EvaluacionMascota extends StatefulWidget {
  final String mascotaId;

  const EvaluacionMascota({Key? key, required this.mascotaId}) : super(key: key);

  @override
  _EvaluacionMascotaState createState() => _EvaluacionMascotaState();
}

class _EvaluacionMascotaState extends State<EvaluacionMascota> {
  Interpreter? _interpreter;
  String _resultado = "Cargando...";
  List<double> entradaModelo = [];


  Map<String, int> tokenMapping = { };


  @override
  void initState() {
    super.initState();
    //insertarTokensEnFirebase();
   //insertarComportamientosEnFirebase();
   //insertarNecesidadesEspecialesEnFirebase();
    _inicializarEvaluacion();
  }

  Future<void> insertarTokensEnFirebase() async {
    CollectionReference tokensRef = FirebaseFirestore.instance.collection('tokens_palabras');

    // üîπ Lista de palabras clave y frases compuestas
    List<String> palabrasClave = [
      // üê∂ Comportamientos de perros
      "Ladrido", "Meneado de cola", "Postura de juego", "Salto excesivo",
      "Lamer excesivamente", "Morder objetos", "Orinar en casa",
      "Escarbar en el suelo", "Jalar la correa", "Dar la pata",

      // üê± Comportamientos de gatos
      "Ronronear", "Maullidos excesivos", "Frotarse contra personas",
      "Cazar y traer regalos", "Saltos inesperados", "Bufar o gru√±ir",

      // üîπ Necesidades especiales
      "Dieta Hipoalerg√©nica", "Epilepsia", "Ceguera", "Ansiedad por Separaci√≥n",
      "Problemas de Articulaciones", "Hipotiroidismo", "Problemas Digestivos",
      "Dermatitis Al√©rgica", "Dieta para Enfermedad Renal", "FIV (Sida Felino)",
      "Dieta para Problemas Urinarios", "Problemas de Socializaci√≥n",
      "Problemas de Incontinencia", "Dieta para Insuficiencia Renal",
      "Ansiedad en Ambientes Nuevos", "Marcaje con Orina por Estr√©s",
      "Problemas de Reactividad", "P√©rdida de Peso",
      "Movilidad Reducida", "Sordera", "Enfermedad Cr√≥nica"
    ];

    // üîπ Generar un c√≥digo √∫nico basado en el √≠ndice
    List<Map<String, dynamic>> tokens = palabrasClave.asMap().entries.map((entry) {
      int index = entry.key + 1; // üîπ Empezar desde 1
      return {"palabra": entry.value.toLowerCase().trim(), "codigoModelo": index};
    }).toList();

    // üîπ Insertar cada palabra en Firestore
    for (var token in tokens) {
      await tokensRef.doc(token["palabra"]).set(token);
    }

    print("‚úÖ Tokens insertados correctamente en Firebase.");
  }



  Future<void> insertarComportamientosEnFirebase() async {
    CollectionReference comportamientosRef =
    FirebaseFirestore.instance.collection('comportamientos_mascotas');

    // üîπ Obtener tokens actualizados antes de insertar datos
    Map<String, int> tokenMapping = await obtenerTokensDesdeFirebase();

    // üîπ Lista de comportamientos ampliada
    List<Map<String, dynamic>> comportamientos = [
      {"tipoMascota": "Perro", "comportamiento": "Ladrido", "descripcion": "Puede ser por alerta, ansiedad, emoci√≥n o aburrimiento."},
      {"tipoMascota": "Perro", "comportamiento": "Meneado de cola", "descripcion": "Indica felicidad, aunque si es r√≠gido puede significar tensi√≥n."},
      {"tipoMascota": "Perro", "comportamiento": "Postura de juego", "descripcion": "Agachan el pecho y levantan la cola para invitar a jugar."},
      {"tipoMascota": "Perro", "comportamiento": "Salto excesivo", "descripcion": "Puede significar emoci√≥n extrema o falta de entrenamiento."},
      {"tipoMascota": "Perro", "comportamiento": "Lamer excesivamente", "descripcion": "Puede ser afecto, ansiedad o problemas en la piel."},
      {"tipoMascota": "Perro", "comportamiento": "Morder objetos", "descripcion": "Ansiedad, exploraci√≥n o dentici√≥n en cachorros."},
      {"tipoMascota": "Perro", "comportamiento": "Orinar en casa", "descripcion": "Puede ser falta de entrenamiento, marcaje o ansiedad."},
      {"tipoMascota": "Perro", "comportamiento": "Escarbar en el suelo", "descripcion": "Comportamiento instintivo de b√∫squeda o enfriamiento."},
      {"tipoMascota": "Gato", "comportamiento": "Ronronear", "descripcion": "Expresi√≥n de relajaci√≥n, satisfacci√≥n o incluso dolor."},
      {"tipoMascota": "Gato", "comportamiento": "Maullidos excesivos", "descripcion": "Puede indicar hambre, estr√©s o problemas de salud."},
      {"tipoMascota": "Gato", "comportamiento": "Frotarse contra personas", "descripcion": "Marcaje de territorio con feromonas."},
      {"tipoMascota": "Gato", "comportamiento": "Cazar y traer regalos", "descripcion": "Comportamiento instintivo de caza."},
      {"tipoMascota": "Gato", "comportamiento": "Orinar fuera del arenero", "descripcion": "Puede deberse a estr√©s, enfermedad o problemas de marcaje."},
      {"tipoMascota": "Gato", "comportamiento": "Saltos inesperados", "descripcion": "Liberaci√≥n de energ√≠a o juego."},
    ];

    for (var comportamiento in comportamientos) {
      String palabraClave = comportamiento["comportamiento"].toString().toLowerCase().trim();
      int codigoModelo = tokenMapping[palabraClave] ?? 0;

      await comportamientosRef.add({
        ...comportamiento,
        "codigoModelo": codigoModelo,
      });
    }

    print("‚úÖ Comportamientos insertados en Firebase.");
  }


  Future<void> insertarNecesidadesEspecialesEnFirebase() async {
    CollectionReference necesidadesRef =
    FirebaseFirestore.instance.collection('necesidades_especiales');

    // üîπ Obtener tokens actualizados antes de insertar datos
    Map<String, int> tokenMapping = await obtenerTokensDesdeFirebase();

    // üîπ Lista ampliada de necesidades
    List<Map<String, dynamic>> necesidadesEspeciales = [
      {"tipoMascota": "Perro", "necesidadEspecial": "Dieta Hipoalerg√©nica", "descripcion": "Alimentaci√≥n especial para perros con alergias alimentarias."},
      {"tipoMascota": "Perro", "necesidadEspecial": "Epilepsia", "descripcion": "Tratamiento con medicaci√≥n para controlar convulsiones."},
      {"tipoMascota": "Perro", "necesidadEspecial": "Ceguera", "descripcion": "Necesita adaptaci√≥n en casa y entrenamiento especial."},
      {"tipoMascota": "Perro", "necesidadEspecial": "Ansiedad por Separaci√≥n", "descripcion": "Requiere terapia conductual y posible medicaci√≥n."},
      {"tipoMascota": "Perro", "necesidadEspecial": "Problemas de Articulaciones", "descripcion": "Requiere suplementos y cuidados especiales."},
      {"tipoMascota": "Perro", "necesidadEspecial": "Hipotiroidismo", "descripcion": "Desequilibrio hormonal tratado con medicaci√≥n."},
      {"tipoMascota": "Gato", "necesidadEspecial": "Dieta para Enfermedad Renal", "descripcion": "Alimento bajo en f√≥sforo para gatos con enfermedad renal."},
      {"tipoMascota": "Gato", "necesidadEspecial": "FIV (Sida Felino)", "descripcion": "Sistema inmune debilitado, necesita cuidados regulares."},
      {"tipoMascota": "Gato", "necesidadEspecial": "Dermatitis Al√©rgica", "descripcion": "Alergias en la piel por factores ambientales o alimentos."},
      {"tipoMascota": "Gato", "necesidadEspecial": "Problemas de Socializaci√≥n", "descripcion": "Miedo o agresividad con otros gatos o personas."},
      {"tipoMascota": "Gato", "necesidadEspecial": "Problemas Digestivos", "descripcion": "Dieta especial para intolerancias alimentarias."},
    ];

    for (var necesidad in necesidadesEspeciales) {
      String palabraClave = necesidad["necesidadEspecial"].toString().toLowerCase().trim();
      int codigoModelo = tokenMapping[palabraClave] ?? 0;

      await necesidadesRef.add({
        ...necesidad,
        "codigoModelo": codigoModelo,
      });
    }

    print("‚úÖ Necesidades especiales insertadas en Firebase.");
  }


  Future<Map<String, int>> obtenerTokensDesdeFirebase() async {
    CollectionReference tokensRef = FirebaseFirestore.instance.collection('tokens_palabras');
    QuerySnapshot querySnapshot = await tokensRef.get();

    // üîπ Convertir la lista en un mapa { palabra: codigoModelo }
    Map<String, int> tokenMapping = {
      for (var doc in querySnapshot.docs)
        doc["palabra"]: doc["codigoModelo"]
    };

    print("üìå Tokens cargados desde Firebase: $tokenMapping");
    return tokenMapping;
  }


  /// üîπ Inicializa la Evaluaci√≥n cargando modelo + datos
  Future<void> _inicializarEvaluacion() async {
    await _loadModel();
    await obtenerDatosMascota();
  }

  /// ‚úÖ Cargar modelo TFLite
  Future<void> _loadModel() async {
    await Firebase.initializeApp();
    final model = await FirebaseModelDownloader.instance.getModel(
      "comportamiento_necesidad",
      FirebaseModelDownloadType.latestModel,
      FirebaseModelDownloadConditions(),
    );

    _interpreter = Interpreter.fromFile(model.file);
    print("‚úÖ Modelo cargado correctamente.");
  }

  /// üîπ Obtener datos de Firebase y prepararlos para el modelo
  Future<void> obtenerDatosMascota() async {
    final sessionProvider = Provider.of<SessionProvider>(context, listen: false);

    try {
      DocumentSnapshot doc = await FirebaseFirestore.instance
          .collection('users')
          .doc(sessionProvider.user!.userId)
          .collection('mascotas')
          .doc(widget.mascotaId)
          .get();

      if (doc.exists) {
        var data = doc.data() as Map<String, dynamic>;

        List<dynamic> comportamientos = data["comportamientosMascota"] ?? [];
        List<dynamic> necesidadesEspeciales = data["necesidadMascota"] ?? [];

        // üî• Convertimos cada lista de palabras en secuencias num√©ricas
        List<int> secuenciaComportamientos =
        tokenizarTexto(comportamientos.map((c) => c["comportamiento"] as String).toList());

        List<int> secuenciaNecesidades =
        tokenizarTexto(necesidadesEspeciales.map((n) => n["necesidadEspecial"] as String).toList());

        // üîπ Construimos la entrada para el modelo
        entradaModelo = [
          data["tipoMascota"] == "Perro" ? 1.0 : 0.0,
          comportamientos.length.toDouble(),
          necesidadesEspeciales.length.toDouble(),
        ];

        print("üêæ Entrada al modelo (despu√©s de obtener datos): $entradaModelo");

        if (_interpreter != null) {
          ejecutarPrediccion();
        }
      } else {
        setState(() {
          _resultado = "‚ö†Ô∏è No se encontraron datos para esta mascota.";
        });
      }
    } catch (e) {
      setState(() {
        _resultado = "‚ùå Error al obtener datos.";
      });
    }
  }

  List<int> tokenizarTexto(List<String> palabras) {
    return palabras
        .map((palabra) => tokenMapping[palabra.toLowerCase()] ?? 0) // üî• Si la palabra no existe, asigna 0
        .toList();
  }




  /// üîπ Ejecutar predicci√≥n
  void ejecutarPrediccion() {
    if (_interpreter == null) return;
    var salida = List.filled(1, 0.0).reshape([1, 1]);
    _interpreter!.run(entradaModelo, salida);
    setState(() {
      _resultado = "Nivel de cuidado: ${(salida[0][0] * 100).toInt()}%";
    });
  }

  @override
  void dispose() {
    _interpreter?.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Evaluaci√≥n de la Mascota")),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text("Resultado:", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            Text(_resultado, style: TextStyle(fontSize: 20, color: Colors.blue)),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: obtenerDatosMascota,
              child: Text("Actualizar Evaluaci√≥n"),
            ),
          ],
        ),
      ),
    );
  }
}
